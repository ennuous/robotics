import numpy as np
import cv2

def cmap(file, data):
        ''' Takes an image, video, or live camera,
            and creates contours of each frame. '''
        data = data.lower()
        if data == "image" or data == "cimage":
                image = cv2.imread(file, 0)
                ret, thresh = cv2.threshold(image, 91, 255, cv2.THRESH_BINARY)
                contours = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)[-2]
                for c in contours:
                        M = cv2.moments(c)
                        if M["m00"] != 0:
                                cx = int(M['m10']/M['m00'])
                                cy = int(M['m01']/M['m00'])
                        else:
                                cx, cy = 0,0
                        if data == "cimage":
                                cv2.drawContours(image, [c], -1, (0,255,0), 3)
                                cv2.circle(image, (cx, cy), 5, (0,0,255), -1)
                cv2.imshow("Contour Map", image)
                cv2.waitKey()
        elif data == "video" or data == "cvideo":
                        cap = cv2.VideoCapture(file)
                        while(cap.isOpened()):
                                ret, frame = cap.read()
                                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                                blur = cv2.GaussianBlur(gray, (5,5), 0)
                                ret, thresh = cv2.threshold(blur, 91, 255, cv2.THRESH_BINARY)
                                contours = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)[-2]
                                for c in contours:
                                        M = cv2.moments(c)
                                        if M["m00"] != 0:
                                                cx = int(M['m10']/M['m00'])
                                                cy = int(M['m01']/M['m00'])
                                        else:
                                                cx, cy = 0,0
                                        if data == "cvideo":
                                                cv2.drawContours(frame, [c], -1, (0,255,0), 3)
                                                cv2.circle(frame, (cx, cy), 5, (0,0,255), -1)
                                cv2.imshow("Frame", frame)
                                if cv2.waitKey(1) & 0xFF == ord('q'):
                                        break
                        cap.release()
        cv2.destroyAllWindows()
        
def cmask():
    global hsv
    cap = cv2.VideoCapture(0)
    cv2.namedWindow("hsv")
    cv2.setMouseCallback("hsv",onmouse);
    while(True):
        ret, frame = cap.read()
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        cv2.imshow('hsv',hsv)
        lower_green = np.array([30,6,255])
        upper_green = np.array([88,52,255])
        mask = cv2.inRange(hsv, lower_green, upper_green)
        res = cv2.bitwise_and(frame, frame, mask=mask)
        res = cv2.cvtColor(res, cv2.COLOR_BGR2GRAY)
        res2 = cv2.bitwise_and(frame, frame, mask=mask)
        res2 = cv2.cvtColor(res2, cv2.COLOR_BGR2GRAY)
        contours = cv2.findContours(res, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)[-2]
        for c in contours:
            M = cv2.moments(c)
            if M["m00"] != 0:
                cx = int(M['m10']/M['m00'])
                cy = int(M['m01']/M['m00'])
            else:
                cx, cy = 0,0
            cv2.drawContours(res2, [c], -1, (0,255,0), 3)
            cv2.circle(res2, (cx, cy), 5, (0,0,255), -1) 
        cv2.imshow("No contours", res)
        cv2.imshow("Contours", res2)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()
    
def onmouse(k,x,y,s,p):
    if k == 1:
        print(hsv[y,x])
